           class Solution {
              public int findDuplicate(int[] nums) {
                  Arrays.sort(nums);
                  int start = 0, end = nums.length-1;

                  while(start<end){
                      int mid = start + (end-start)/2;

                      if(mid>0 && nums[mid]==nums[mid-1] || mid<nums.length && nums[mid]==nums[mid+1]){
                          return nums[mid];
                      }

                      if(nums[mid]>=mid+1){
                          start = mid+1;
                      }else{
                          end = mid-1;
                      }
                  }
                  return -1;
              }
          }
        ---------------------------------------------------------------------------------------------------
        import java.util.* ;
        import java.io.*; 
        import java.util.ArrayList;

        public class Solution{
            public static int findDuplicate(ArrayList<Integer> arr, int n){
                Collections.sort(arr);
                int start = 0, end = arr.size()-1;

                while(start<end){
                    int mid = start + (end-start)/2;

                    if(mid>0 && arr.get(mid)==arr.get(mid-1) || mid<arr.size() && arr.get(mid)==arr.get(mid+1)){
                        return arr.get(mid);
                    }

                    if(arr.get(mid)>=mid+1){
                        start = mid+1;
                    }else{
                        end = mid-1;
                    }
                }
                return -1;
            }
        }
